#!/bin/bash
blogdir=$(pwd)

main() {
	[[ -f "$blogdir/config" ]] &&
		{ source "$blogdir/config" ||
			{ echo -e "\n\n‚ùóYour config file is broken ‚ùó\n\n"; exit 1 ;};}
	# public variables
	export blog_title=${blog_title:-"Blog Name"}
	export blog_desc=${blog_desc:-"Blog description"}
	export blog_url=${blog_url:-"https://localhost/blog"}
	export blog_author=${blog_author:-"Default Author"}
	export date_fmt=${date_fmt:-"%B %-d, %Y"}
	export enable_rss=${enable_rss:-true}
	export ex=${ex:-md}

	export postlist_fmt=${postlist_fmt:-'<a href="$category/$fname">$title</a> by $author on $date'}
	export max_postlist=${max_postlist:-unlimited}

	templ=${templ:-templ}
	public=${public:-public}

	# dependencies
	markup=${markup:-smu}
	markup_link=${markup_link:-https://github.com/Gottox/smu}
	hash "$markup" 2> /dev/null ||
		{ echo "üì¶ $markup must be installed, check $markup_link." && exit 1; }

	# create directories
	mkdir -p $blogdir/$templ
	mkdir -p $blogdir/$public

	# temp dir
	temp=$(mktemp -d)
	trap 'rm -rf "$temp"' EXIT

	# clean files
	cleanf && _verbose "üßπ clean old files."

	# do the thing
	render_pages
	$enable_rss && render_rss && _verbose -e "\nüö© rss"

	_verbose -e "\n‚úÖ Done."
}

################ Utils ###################
_verbose() {
	[[ "$verbose" = "true" ]] && echo $@
}

render_pages() {
	local fbase post_dir post_file post_list category template; _verbose -e "rendering pages..."
	[[ -f "$blogdir/_site" ]] || echo -e "/posts\t*\t1\n/\tindex" >> "$blogdir/_site"
	while read line; do
		post_dir="$(awk '{print $1}' <<< "$line")" && _verbose "üß© $post_dir"
		post_dir=$blogdir${post_dir%'/'}
		[[ -d "$post_dir" ]] || continue
		post_file=$(awk '{print $2}' <<< "$line")

		for p in $(ls -t1 $post_dir/$post_file.$ex 2>/dev/null); do
			post_list=$(awk '{print $3}' <<< "$line")
			[[ "$post_list" = "1" ]] && post_list=true || post_list=false
			fbase=$(basename "$p" | sed -e 's/\s/-/g' -e 's/"//g' | awk '{print tolower($0)}')
			fbase=${fbase%.$ex}
			if [[ "$blogdir" = "$post_dir" ]]; then
				category=""
				template="$fbase"_template
				output="$blogdir/$public/$fbase.html"
			else
				category=$(basename $post_dir)
				template="$category"_template
				output="$blogdir/$public/$category/$fbase.html"
				[[ -d "$blogdir/$public/$category" ]] || mkdir -p "$blogdir/$public/$category"
			fi

			render_html "$template" "$p" "$post_list" "$category" > "$output" && _verbose -e "|   ‚úç $fbase"
		done

		$post_list || continue

		[[ "$max_postlist" != "unlimited" ]] &&
			export list_$category='<ul class="postlist">'"$(head -n $max_postlist $temp/postlist)"'</ul>' &&
			export archive_$category='<ul class="postlist">'"$(cat $temp/postlist 2>/dev/null)"'</ul>' ||
			export list_$category='<ul class="postlist">'"$(cat $temp/postlist 2>/dev/null)"'</ul>'
		rm -f "$temp/postlist"

	done < "$blogdir/_site"
}

load_metadata() {
	local file=$1\
		  isapost=${2:-false}\
		  category=$3\
	      meta=$(sed -ne '/^---$/,/^---$/ { /---/!p }' $file)\
	      fbase=$(basename "$file" | sed -e 's/\s/-/g' -e 's/"//g' | awk '{print tolower($0)}')\
		  aux

	aux=$(sed -n 's/^title:\s\?\(.*\)$/\1/p' <<< $meta)
	[ -z "$aux" ] && aux=$(basename $file | sed -e 's/\.'$ex'$//' -e 's/[-_]/ /g')
	export title=$aux

	aux=$(sed -n 's/^author:\s\?\(.*\)$/\1/p' <<< $meta)
	[ -z "$aux" ] && aux=$blog_author
	export author="$aux"

	export summary=$(echo "$meta" | sed -n 's/^summary:\s\?\(.*\)$/\1/p')

	metadate_check $(sed -n 's/^date:\s\?\(.*\)$/\1/p' <<< $meta) $file

	local udate=$(date -d "`stat -c %y "$file"`" +"%s")
	export date=$(date -d "@$udate" +"$date_fmt")

	$enable_rss && $isapost && [[ ! -z "$category" ]] &&
		echo -e "<item>\n<category>$category</category><title>$title</title>\n<author>$author</author>\n<guid>${blog_url%'/'}/$category/${fbase%.$ex}.html</guid>\n<pubDate>$(date -d "@$udate" +"%a, %d %b %Y %H:%M:%S %z")</pubDate><description><![CDATA[\c" >> $temp/rss

	$isapost && postlist_add "${fbase%.$ex}" "$title" "$author" "$date" "$category"
}

postlist_add() {
	export fname=$1.html\
		   title=$2\
		   author=$3\
		   date=$4\
		   category=$5
	echo "<li>$(envsubst <<< $postlist_fmt)</li>" >> $temp/postlist
}

metadate_check() {
	local file=$2;
	if [[ ! -z "$1" ]] && date -d "$1" > /dev/null 2>&1; then
		local mdate=$(date -d "$1" +"%F")
		local fdate=$(date -d "`stat -c %y "$file"`" +"%F")
		[[ "$mdate" != "$fdate" ]] &&
			touch -d "$mdate" "$file"
	fi
}

render_rss() {
	local rss_templ="$blogdir/$templ/rss_template.xml"
	[[ -f "$temp/rss" ]] || return
	export blog_rss=$(envsubst < $temp/rss)
	[[ -f "$rss_templ" ]] ||
		echo -e '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0">\n<channel>\n<title>$blog_title</title>\n<link>$blog_url</link>\n<description>$blog_desc</description>\n$blog_rss\n</channel>\n</rss>' > $rss_templ

	envsubst < $rss_templ > $blogdir/$public/rss.xml
}

cleanf() {
	find "$blogdir/$public/" -name "*.html" -type f -exec rm -f {} +
	rm -f $blogdir/$public/rss.xml
}

include_parser() {
	local html=$(cat "$1")
	for file in $(sed -ne 's/^\s*\$include\s*<\([^>]*\)>\s*/\1/p' "$1"); do
		html=$(sed -e '/^\s*\$include\s*<'"$file"'>\s*/{
			r '"$blogdir/$templ/$file"'
			d
		}' <<< "$html")
	done
	echo "$html"
}

render_html() {
	local template="$blogdir/$templ/$1.html"\
		  file=$2\
		  isapost=${3:-false}\
		  category=$4

	[[ -f $file ]] || return
	[[ -f "$template" ]] ||
		echo -e '<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset="utf-8">\n\t<title>$blog_title</title>\n\t<meta name="description" content="$blog_desc">\n\t<link rel="alternate" type="application/rss+xml" title="RSS Feed for $blog_title" href="rss.xml"/>\n\t<link rel="stylesheet" href="style.css">\n</head>\n<body>\n<header>\n\t<h1><a href="./index.html"/>$blog_title</a></h1>\n</header>\n<article>$post</article>\n<footer>\n\t<small>Powered by <a href="https://github.com/jaderebrasil/blog">blog</a></small>\n</footer>\n</body>\n</html>' > $template;

	load_metadata $file $isapost $category

	local src=$(sed -e '/^---$/,/^---$/ { d }' $file)
	local html=$($markup <<< $src)
	export post=$(envsubst <<< $html)

	$enable_rss && $isapost && [[ ! -z "$category" ]] &&
		echo -e "${post//$'\n'/}]]></description>\n</item>\n" >> $temp/rss

	envsubst <<< $(include_parser "$template")
}
##########################################
main
